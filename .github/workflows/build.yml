name: Release

on:
  release:
    types: [created]

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go 1.21.x
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.x
      - name: Install dependencies
        run: |
          go get github.com/getlantern/systray
          go get github.com/pelletier/go-toml
      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install gcc libgtk-3-dev libayatana-appindicator3-dev

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: go build -o ./linux/ha-battery-level
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: go build -ldflags -H=windowsgui -o ./windows/ha-battery-level.exe
      - name: Build (MacOS)
        if: matrix.os == 'macos-latest'
        run: go build -o ./macos/ha-battery-level

      - name: Copy Icons (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir ./linux/icons 
          cp ./icons/* ./linux/icons
      - name: Copy Icons (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir ./windows/icons
          cp ./icons/* ./windows/icons
      - name: Copy Icons (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir ./macos/icons
          cp ./icons/* ./macos/icons

      - name: Archive (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: tar -czvf linux.tar.gz ./linux/*
      - name: Archive (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path ./windows/* -Destination windows.zip
      - name: Archive (MacOS)
        if: matrix.os == 'macos-latest'
        run: zip -r macos.zip ./macos/*

      - name: Upload Release Asset (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./linux.tar.gz
          asset_name: linux.tar.gz
          asset_content_type: application/gzip
          asset_label: linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip
          asset_label: windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
      - name: Upload Release Asset (MacOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./macos.zip
          asset_name: macos.zip
          asset_content_type: application/zip
          asset_label: macos.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
